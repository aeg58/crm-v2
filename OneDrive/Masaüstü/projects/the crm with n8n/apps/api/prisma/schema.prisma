// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Customer {
  id        String         @id @default(cuid())
  name      String
  email     String?
  phone     String?
  company   String?
  source    CustomerSource
  status    CustomerStatus @default(ACTIVE)
  tags      String[]
  notes     String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  messages Message[]
  leads    Lead[]

  @@index([email])
  @@index([phone])
  @@index([source])
  @@index([status])
  @@index([createdAt])
  @@index([source, status])
  @@map("customers")
}

model Message {
  id         String        @id @default(cuid())
  customerId String
  content    String
  direction  MessageDirection
  platform   MessagePlatform
  sentiment  Sentiment?
  leadScore  Int?
  intent     String?
  tags       String[]
  metadata   Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([createdAt])
  @@index([direction])
  @@index([platform])
  @@index([sentiment])
  @@index([createdAt, customerId])
  @@index([sentiment, platform])
  @@map("messages")
}

model Lead {
  id         String     @id @default(cuid())
  customerId String
  score      Int        @default(0)
  status     LeadStatus @default(NEW)
  source     String
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([score])
  @@index([status])
  @@index([createdAt])
  @@index([score, status])
  @@map("leads")
}

// Enums
enum Role {
  ADMIN
  USER
}

enum CustomerSource {
  WHATSAPP
  INSTAGRAM
  MANUAL
  OTHER
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessagePlatform {
  WHATSAPP
  INSTAGRAM
  MANUAL
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}
